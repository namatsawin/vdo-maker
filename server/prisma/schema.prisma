// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  projects  Project[]
  
  @@map("users")
}

model Project {
  id           String   @id @default(cuid())
  title        String
  description  String?
  status       String   @default("DRAFT") // DRAFT, IN_PROGRESS, COMPLETED, FAILED
  currentStage String   @default("SCRIPT_GENERATION") // SCRIPT_GENERATION, IMAGE_GENERATION, VIDEO_GENERATION, AUDIO_GENERATION, FINAL_ASSEMBLY, COMPLETED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments     Segment[]
  
  @@map("projects")
}

model Segment {
  id                     String   @id @default(cuid())
  order                  Int
  script                 String
  videoPrompt            String
  status                 String   @default("DRAFT") // Overall status: DRAFT, PENDING, APPROVED, REJECTED, REGENERATING
  
  // Individual approval statuses
  scriptApprovalStatus   String   @default("DRAFT") // DRAFT, PENDING, APPROVED, REJECTED, REGENERATING
  imageApprovalStatus    String   @default("DRAFT")
  videoApprovalStatus    String   @default("DRAFT")
  audioApprovalStatus    String   @default("DRAFT")
  finalApprovalStatus    String   @default("DRAFT")
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  // Relations
  projectId              String
  project                Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  images                 Image[]
  videos                 Video[]
  audios                 Audio[]
  
  @@map("segments")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  prompt    String
  status    String   @default("PENDING") // DRAFT, PENDING, APPROVED, REJECTED, REGENERATING
  metadata  String?  // JSON string for additional data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  segmentId String
  segment   Segment  @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  
  @@map("images")
}

model Video {
  id        String   @id @default(cuid())
  url       String
  prompt    String
  status    String   @default("PENDING") // DRAFT, PENDING, APPROVED, REJECTED, REGENERATING
  duration  Int?     // Duration in seconds
  metadata  String?  // JSON string for additional data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  segmentId String
  segment   Segment  @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  
  @@map("videos")
}

model Audio {
  id        String   @id @default(cuid())
  url       String
  text      String
  voice     String   // Voice type used
  status    String   @default("PENDING") // DRAFT, PENDING, APPROVED, REJECTED, REGENERATING
  duration  Int?     // Duration in seconds
  metadata  String?  // JSON string for additional data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  segmentId String
  segment   Segment  @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  
  @@map("audios")
}

model Job {
  id        String   @id @default(cuid())
  type      String   // SCRIPT_GENERATION, IMAGE_GENERATION, VIDEO_GENERATION, AUDIO_GENERATION, VIDEO_ASSEMBLY
  status    String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  data      String   // JSON string for job data
  result    String?  // JSON string for job result
  error     String?  // Error message if failed
  retries   Int      @default(0)
  maxRetries Int     @default(3)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("jobs")
}
