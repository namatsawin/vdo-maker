generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemInstruction {
  id          String   @id @default(cuid())
  name        String
  description String?
  instruction String
  category    String   @default("general")
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("system_instructions")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String
  name               String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  projects           Project[]
  systemInstructions SystemInstruction[]

  @@map("users")
}

model Project {
  id           String    @id @default(cuid())
  title        String
  description  String?
  status       String    @default("DRAFT")
  currentStage String    @default("SCRIPT_GENERATION")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments     Segment[]

  @@map("projects")
}

model Segment {
  id                   String   @id @default(cuid())
  order                Int
  script               String
  videoPrompt          String
  status               String   @default("DRAFT")
  scriptApprovalStatus String   @default("DRAFT")
  imageApprovalStatus  String   @default("DRAFT")
  videoApprovalStatus  String   @default("DRAFT")
  audioApprovalStatus  String   @default("DRAFT")
  finalApprovalStatus  String   @default("DRAFT")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  projectId            String
  audios               Audio[]
  images               Image[]
  project              Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  videos               Video[]

  @@map("segments")
}

model Image {
  id         String   @id @default(cuid())
  url        String
  prompt     String
  metadata   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  segmentId  String
  isSelected Boolean  @default(false)
  segment    Segment  @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@map("images")
}

model Video {
  id        String   @id @default(cuid())
  url       String
  prompt    String
  taskId    String?  // For tracking async video generation tasks
  duration  Int?
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  segmentId String
  segment   Segment  @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Audio {
  id         String   @id @default(cuid())
  url        String
  text       String
  voice      String
  metadata   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  segmentId  String
  isSelected Boolean  @default(false)
  segment    Segment  @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@map("audios")
}

model Job {
  id         String   @id @default(cuid())
  type       String
  status     String   @default("PENDING")
  data       String
  result     String?
  error      String?
  retries    Int      @default(0)
  maxRetries Int      @default(3)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("jobs")
}
