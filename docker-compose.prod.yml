# Docker Compose for Production
version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=vdo_maker
      - POSTGRES_USER=vdo_maker_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vdo_maker_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vdo-maker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vdo_maker_user -d vdo_maker"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Frontend Service (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=http://localhost:3001/api/v1
    depends_on:
      - backend
    networks:
      - vdo-maker-network
    restart: unless-stopped

  # Backend Service (Production)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - API_VERSION=v1
      - FRONTEND_URL=http://localhost
      - DATABASE_URL=postgresql://vdo_maker_user:${POSTGRES_PASSWORD:-vdo_maker_password}@postgres:5432/vdo_maker
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
      - PIAPI_API_KEY=${PIAPI_API_KEY}
      - PIAPI_BASE_URL=https://api.piapi.ai
      - UPLOAD_DIR=./uploads
      - MAX_FILE_SIZE=50MB
      - ALLOWED_FILE_TYPES=mp4,mov,avi,mp3,wav,png,jpg,jpeg
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    volumes:
      - backend-uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - vdo-maker-network

networks:
  vdo-maker-network:
    driver: bridge

volumes:
  backend-uploads:
  postgres_data:
